# "org" ensures this Service is used with the correct Serverless Framework Access Key.
# org: org-name
# "service" is the name of this project. This will also be added to your AWS resource names.
service: pj-name-serverless-global

provider:
  name: aws
  stage: stg
  region: us-east-1
  #  以下はlambdaのデフォルト設定(置き換えのものもマージのものもある)
  runtime: python3.12
  # memorySize: 128
  # timeout: 10
  # environment:
  #   APP_ENV: ${param:APP_ENV}
  #   API_ENDPOINT1: ${param:DOMAIN_NAME}/api/trigger1
  #   API_ENDPOINT2: ${param:DOMAIN_NAME}/api/trigger2
  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - s3:ListBucket
  #         Resource:
  #           - !Ref S3Bucket1
  #           - !Ref S3Bucket2
  # logRetentionInDays: 14
  # vpc:
  #   securityGroupIds:
  #     - !Ref PjNameSg
  #   subnetIds:
  #     - !Ref PjNamePrivateSubnet1
  #     - !Ref PjNamePrivateSubnet2

functions:
  lambdaEdgeViewerRequest:
    handler: handlers/edge.viewer_request
    memorySize: 128 # Lambda@Edgeの制限は128MB
    timeout: 5 # Lambda@Edgeの制限は5秒
    name: ${self:service}-${sls:stage}-lambdaEdgeViewerRequest
    role: !GetAtt LambdaEdgeViewerRequestFunctionRole.Arn # policyのマージでなくロールごと置き換える(assumeRolePoicyを指定するため)
    logRetentionInDays: 731
    maximumRetryAttempts: 0

custom:
  serverless-iam-roles-per-function:
    defaultInherit: true
  prune:
    automatic: true
    includeLayers: true
    number: 3

params:
  default: ${file(./.env.${sls:stage}.yml)}
  stg: ${file(./.env.stg.yml)}
  prd: ${file(./.env.prd.yml)}

resources:
  Resources:
    PjNameWafWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:service}-${sls:stage}-web-acl
        Scope: CLOUDFRONT
        DefaultAction:
          Allow: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: ${self:service}-${sls:stage}-web-acl-metric
        Rules: []
    LambdaEdgeViewerRequestFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: pj-name-sls-${sls:stage}-edgelambda-us-es-1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "edgelambda.amazonaws.com"
                  - "lambda.amazonaws.com"
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaEdgeViewerRequestFunctionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:${aws:accountId}:log-group:/aws/lambda/*:*:*

  Outputs:
    WafWebAclArn:
      Description: "WAF WebACL ARN for CloudFront"
      Value: !GetAtt PjNameWafWebAcl.Arn
      Export:
        Name: ${self:service}-${sls:stage}-web-acl-arn
    LambdaEdgeFunctionArn:
      Description: "Lambda@Edge Function ARN"
      Value: !Ref LambdaEdgeViewerRequestLambdaFunction
      Export:
        Name: ${self:service}-${sls:stage}-lambda-edge-function-arn

plugins:
  - serverless-better-credentials
  # - serverless-iam-roles-per-function # roleごと置き換えるので使用せず
  - serverless-prune-plugin
  # - serverless-lambda-edge-pre-existing-cloudfront # Cloudformation管理ではなさそうなので自分で制御する
